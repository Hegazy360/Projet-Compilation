Terminals unused in grammar

   DE


Grammar

    0 $accept: programme $end

    1 programme: PROG corps

    2 corps: liste_declarations POINT_VIRGULE liste_instructions
    3      | liste_instructions

    4 liste_declarations: declaration
    5                   | liste_declarations POINT_VIRGULE declaration

    6 liste_instructions: DEBUT suite_liste_inst FIN

    7 suite_liste_inst: instruction POINT_VIRGULE
    8                 | suite_liste_inst instruction POINT_VIRGULE

    9 declaration: declaration_type
   10            | declaration_variable
   11            | declaration_procedure
   12            | declaration_fonction

   13 declaration_type: TYPE IDF DEUX_POINTS suite_declaration_type

   14 suite_declaration_type: STRUCT liste_champs POINT_VIRGULE FSTRUCT
   15                       | TABLEAU dimension DEUX_POINTS nom_type

   16 dimension: CROCHET_OUVRANT liste_dimensions CROCHET_FERMANT

   17 liste_dimensions: une_dimension
   18                 | liste_dimensions VIRGULE une_dimension

   19 une_dimension: exparith POINT POINT exparith

   20 liste_champs: un_champ
   21             | liste_champs POINT_VIRGULE un_champ

   22 un_champ: IDF DEUX_POINTS nom_type

   23 nom_type: type_simple
   24         | IDF

   25 type_simple: ENTIER
   26            | REEL
   27            | BOOLEEN
   28            | CARACTERE
   29            | CHAINE CROCHET_OUVRANT CSTE_ENTIERE CROCHET_FERMANT

   30 declaration_variable: VARIABLE IDF DEUX_POINTS nom_type

   31 declaration_procedure: PROCEDURE IDF liste_parametres corps

   32 declaration_fonction: FONCTION IDF liste_parametres RETOURNE type_simple corps

   33 liste_parametres: %empty
   34                 | PARENTHESE_OUVRANTE liste_param PARENTHESE_FERMANTE

   35 liste_param: un_param
   36            | liste_param POINT_VIRGULE un_param

   37 un_param: IDF DEUX_POINTS type_simple

   38 instruction: affectation
   39            | condition
   40            | tant_que
   41            | appel
   42            | VIDE
   43            | RETOURNE resultat_retourne

   44 resultat_retourne: %empty
   45                  | expression

   46 appel: IDF liste_arguments

   47 liste_arguments: %empty
   48                | PARENTHESE_OUVRANTE liste_args PARENTHESE_FERMANTE

   49 liste_args: un_arg
   50           | liste_args VIRGULE un_arg

   51 un_arg: IDF
   52       | expression

   53 condition: SI exprel ALORS liste_instructions SINON liste_instructions

   54 tant_que: TANT_QUE expression FAIRE liste_instructions

   55 affectation: variable OPAFF expression

   56 expression: exparith
   57           | exprel

   58 variable: IDF
   59         | IDF CROCHET_OUVRANT exparith CROCHET_FERMANT
   60         | IDF CROCHET_OUVRANT IDF CROCHET_FERMANT
   61         | IDF CROCHET_OUVRANT IDF CROCHET_FERMANT POINT IDF

   62 exparith: e1

   63 e1: e1 PLUS e2
   64   | e1 MOINS e2
   65   | e2

   66 e2: e2 MULT e3
   67   | e2 DIV e3
   68   | e3

   69 e3: PARENTHESE_OUVRANTE e1 PARENTHESE_FERMANTE
   70   | CSTE_ENTIERE
   71   | CSTE_REEL

   72 exprel: exparith OP_COMP exparith


Terminals, with rules where they appear

$end (0) 0
error (256)
PROG (258) 1
DEBUT (259) 6
FIN (260) 6
STRUCT (261) 14
FSTRUCT (262) 14
TABLEAU (263) 15
DE (264)
VARIABLE (265) 30
PROCEDURE (266) 31
FONCTION (267) 32
RETOURNE (268) 32 43
VIDE (269) 42
POINT_VIRGULE (270) 2 5 7 8 14 21 36
DEUX_POINTS (271) 13 15 22 30 37
POINT (272) 19 61
CROCHET_OUVRANT (273) 16 29 59 60 61
CROCHET_FERMANT (274) 16 29 59 60 61
VIRGULE (275) 18 50
PARENTHESE_OUVRANTE (276) 34 48 69
PARENTHESE_FERMANTE (277) 34 48 69
TYPE (278) 13
IDF (279) 13 22 24 30 31 32 37 46 51 58 59 60 61
ENTIER (280) 25
REEL (281) 26
BOOLEEN (282) 27
CARACTERE (283) 28
CHAINE (284) 29
CSTE_ENTIERE (285) 29 70
CSTE_REEL (286) 71
SI (287) 53
ALORS (288) 53
SINON (289) 53
TANT_QUE (290) 54
FAIRE (291) 54
OPAFF (292) 55
PLUS (293) 63
MOINS (294) 64
MULT (295) 66
DIV (296) 67
OP_COMP (297) 72


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
programme (44)
    on left: 1, on right: 0
corps (45)
    on left: 2 3, on right: 1 31 32
liste_declarations (46)
    on left: 4 5, on right: 2 5
liste_instructions (47)
    on left: 6, on right: 2 3 53 54
suite_liste_inst (48)
    on left: 7 8, on right: 6 8
declaration (49)
    on left: 9 10 11 12, on right: 4 5
declaration_type (50)
    on left: 13, on right: 9
suite_declaration_type (51)
    on left: 14 15, on right: 13
dimension (52)
    on left: 16, on right: 15
liste_dimensions (53)
    on left: 17 18, on right: 16 18
une_dimension (54)
    on left: 19, on right: 17 18
liste_champs (55)
    on left: 20 21, on right: 14 21
un_champ (56)
    on left: 22, on right: 20 21
nom_type (57)
    on left: 23 24, on right: 15 22 30
type_simple (58)
    on left: 25 26 27 28 29, on right: 23 32 37
declaration_variable (59)
    on left: 30, on right: 10
declaration_procedure (60)
    on left: 31, on right: 11
declaration_fonction (61)
    on left: 32, on right: 12
liste_parametres (62)
    on left: 33 34, on right: 31 32
liste_param (63)
    on left: 35 36, on right: 34 36
un_param (64)
    on left: 37, on right: 35 36
instruction (65)
    on left: 38 39 40 41 42 43, on right: 7 8
resultat_retourne (66)
    on left: 44 45, on right: 43
appel (67)
    on left: 46, on right: 41
liste_arguments (68)
    on left: 47 48, on right: 46
liste_args (69)
    on left: 49 50, on right: 48 50
un_arg (70)
    on left: 51 52, on right: 49 50
condition (71)
    on left: 53, on right: 39
tant_que (72)
    on left: 54, on right: 40
affectation (73)
    on left: 55, on right: 38
expression (74)
    on left: 56 57, on right: 45 52 54 55
variable (75)
    on left: 58 59 60 61, on right: 55
exparith (76)
    on left: 62, on right: 19 56 59 72
e1 (77)
    on left: 63 64 65, on right: 62 63 64 69
e2 (78)
    on left: 66 67 68, on right: 63 64 65 66 67
e3 (79)
    on left: 69 70 71, on right: 66 67 68
exprel (80)
    on left: 72, on right: 53 57


State 0

    0 $accept: . programme $end

    PROG  shift, and go to state 1

    programme  go to state 2


State 1

    1 programme: PROG . corps

    DEBUT      shift, and go to state 3
    VARIABLE   shift, and go to state 4
    PROCEDURE  shift, and go to state 5
    FONCTION   shift, and go to state 6
    TYPE       shift, and go to state 7

    corps                  go to state 8
    liste_declarations     go to state 9
    liste_instructions     go to state 10
    declaration            go to state 11
    declaration_type       go to state 12
    declaration_variable   go to state 13
    declaration_procedure  go to state 14
    declaration_fonction   go to state 15


State 2

    0 $accept: programme . $end

    $end  shift, and go to state 16


State 3

    6 liste_instructions: DEBUT . suite_liste_inst FIN

    RETOURNE  shift, and go to state 17
    VIDE      shift, and go to state 18
    IDF       shift, and go to state 19
    SI        shift, and go to state 20
    TANT_QUE  shift, and go to state 21

    suite_liste_inst  go to state 22
    instruction       go to state 23
    appel             go to state 24
    condition         go to state 25
    tant_que          go to state 26
    affectation       go to state 27
    variable          go to state 28


State 4

   30 declaration_variable: VARIABLE . IDF DEUX_POINTS nom_type

    IDF  shift, and go to state 29


State 5

   31 declaration_procedure: PROCEDURE . IDF liste_parametres corps

    IDF  shift, and go to state 30


State 6

   32 declaration_fonction: FONCTION . IDF liste_parametres RETOURNE type_simple corps

    IDF  shift, and go to state 31


State 7

   13 declaration_type: TYPE . IDF DEUX_POINTS suite_declaration_type

    IDF  shift, and go to state 32


State 8

    1 programme: PROG corps .

    $default  reduce using rule 1 (programme)


State 9

    2 corps: liste_declarations . POINT_VIRGULE liste_instructions
    5 liste_declarations: liste_declarations . POINT_VIRGULE declaration

    POINT_VIRGULE  shift, and go to state 33


State 10

    3 corps: liste_instructions .

    $default  reduce using rule 3 (corps)


State 11

    4 liste_declarations: declaration .

    $default  reduce using rule 4 (liste_declarations)


State 12

    9 declaration: declaration_type .

    $default  reduce using rule 9 (declaration)


State 13

   10 declaration: declaration_variable .

    $default  reduce using rule 10 (declaration)


State 14

   11 declaration: declaration_procedure .

    $default  reduce using rule 11 (declaration)


State 15

   12 declaration: declaration_fonction .

    $default  reduce using rule 12 (declaration)


State 16

    0 $accept: programme $end .

    $default  accept


State 17

   43 instruction: RETOURNE . resultat_retourne

    PARENTHESE_OUVRANTE  shift, and go to state 34
    CSTE_ENTIERE         shift, and go to state 35
    CSTE_REEL            shift, and go to state 36

    $default  reduce using rule 44 (resultat_retourne)

    resultat_retourne  go to state 37
    expression         go to state 38
    exparith           go to state 39
    e1                 go to state 40
    e2                 go to state 41
    e3                 go to state 42
    exprel             go to state 43


State 18

   42 instruction: VIDE .

    $default  reduce using rule 42 (instruction)


State 19

   46 appel: IDF . liste_arguments
   58 variable: IDF .
   59         | IDF . CROCHET_OUVRANT exparith CROCHET_FERMANT
   60         | IDF . CROCHET_OUVRANT IDF CROCHET_FERMANT
   61         | IDF . CROCHET_OUVRANT IDF CROCHET_FERMANT POINT IDF

    CROCHET_OUVRANT      shift, and go to state 44
    PARENTHESE_OUVRANTE  shift, and go to state 45

    OPAFF     reduce using rule 58 (variable)
    $default  reduce using rule 47 (liste_arguments)

    liste_arguments  go to state 46


State 20

   53 condition: SI . exprel ALORS liste_instructions SINON liste_instructions

    PARENTHESE_OUVRANTE  shift, and go to state 34
    CSTE_ENTIERE         shift, and go to state 35
    CSTE_REEL            shift, and go to state 36

    exparith  go to state 47
    e1        go to state 40
    e2        go to state 41
    e3        go to state 42
    exprel    go to state 48


State 21

   54 tant_que: TANT_QUE . expression FAIRE liste_instructions

    PARENTHESE_OUVRANTE  shift, and go to state 34
    CSTE_ENTIERE         shift, and go to state 35
    CSTE_REEL            shift, and go to state 36

    expression  go to state 49
    exparith    go to state 39
    e1          go to state 40
    e2          go to state 41
    e3          go to state 42
    exprel      go to state 43


State 22

    6 liste_instructions: DEBUT suite_liste_inst . FIN
    8 suite_liste_inst: suite_liste_inst . instruction POINT_VIRGULE

    FIN       shift, and go to state 50
    RETOURNE  shift, and go to state 17
    VIDE      shift, and go to state 18
    IDF       shift, and go to state 19
    SI        shift, and go to state 20
    TANT_QUE  shift, and go to state 21

    instruction  go to state 51
    appel        go to state 24
    condition    go to state 25
    tant_que     go to state 26
    affectation  go to state 27
    variable     go to state 28


State 23

    7 suite_liste_inst: instruction . POINT_VIRGULE

    POINT_VIRGULE  shift, and go to state 52


State 24

   41 instruction: appel .

    $default  reduce using rule 41 (instruction)


State 25

   39 instruction: condition .

    $default  reduce using rule 39 (instruction)


State 26

   40 instruction: tant_que .

    $default  reduce using rule 40 (instruction)


State 27

   38 instruction: affectation .

    $default  reduce using rule 38 (instruction)


State 28

   55 affectation: variable . OPAFF expression

    OPAFF  shift, and go to state 53


State 29

   30 declaration_variable: VARIABLE IDF . DEUX_POINTS nom_type

    DEUX_POINTS  shift, and go to state 54


State 30

   31 declaration_procedure: PROCEDURE IDF . liste_parametres corps

    PARENTHESE_OUVRANTE  shift, and go to state 55

    $default  reduce using rule 33 (liste_parametres)

    liste_parametres  go to state 56


State 31

   32 declaration_fonction: FONCTION IDF . liste_parametres RETOURNE type_simple corps

    PARENTHESE_OUVRANTE  shift, and go to state 55

    $default  reduce using rule 33 (liste_parametres)

    liste_parametres  go to state 57


State 32

   13 declaration_type: TYPE IDF . DEUX_POINTS suite_declaration_type

    DEUX_POINTS  shift, and go to state 58


State 33

    2 corps: liste_declarations POINT_VIRGULE . liste_instructions
    5 liste_declarations: liste_declarations POINT_VIRGULE . declaration

    DEBUT      shift, and go to state 3
    VARIABLE   shift, and go to state 4
    PROCEDURE  shift, and go to state 5
    FONCTION   shift, and go to state 6
    TYPE       shift, and go to state 7

    liste_instructions     go to state 59
    declaration            go to state 60
    declaration_type       go to state 12
    declaration_variable   go to state 13
    declaration_procedure  go to state 14
    declaration_fonction   go to state 15


State 34

   69 e3: PARENTHESE_OUVRANTE . e1 PARENTHESE_FERMANTE

    PARENTHESE_OUVRANTE  shift, and go to state 34
    CSTE_ENTIERE         shift, and go to state 35
    CSTE_REEL            shift, and go to state 36

    e1  go to state 61
    e2  go to state 41
    e3  go to state 42


State 35

   70 e3: CSTE_ENTIERE .

    $default  reduce using rule 70 (e3)


State 36

   71 e3: CSTE_REEL .

    $default  reduce using rule 71 (e3)


State 37

   43 instruction: RETOURNE resultat_retourne .

    $default  reduce using rule 43 (instruction)


State 38

   45 resultat_retourne: expression .

    $default  reduce using rule 45 (resultat_retourne)


State 39

   56 expression: exparith .
   72 exprel: exparith . OP_COMP exparith

    OP_COMP  shift, and go to state 62

    $default  reduce using rule 56 (expression)


State 40

   62 exparith: e1 .
   63 e1: e1 . PLUS e2
   64   | e1 . MOINS e2

    PLUS   shift, and go to state 63
    MOINS  shift, and go to state 64

    $default  reduce using rule 62 (exparith)


State 41

   65 e1: e2 .
   66 e2: e2 . MULT e3
   67   | e2 . DIV e3

    MULT  shift, and go to state 65
    DIV   shift, and go to state 66

    $default  reduce using rule 65 (e1)


State 42

   68 e2: e3 .

    $default  reduce using rule 68 (e2)


State 43

   57 expression: exprel .

    $default  reduce using rule 57 (expression)


State 44

   59 variable: IDF CROCHET_OUVRANT . exparith CROCHET_FERMANT
   60         | IDF CROCHET_OUVRANT . IDF CROCHET_FERMANT
   61         | IDF CROCHET_OUVRANT . IDF CROCHET_FERMANT POINT IDF

    PARENTHESE_OUVRANTE  shift, and go to state 34
    IDF                  shift, and go to state 67
    CSTE_ENTIERE         shift, and go to state 35
    CSTE_REEL            shift, and go to state 36

    exparith  go to state 68
    e1        go to state 40
    e2        go to state 41
    e3        go to state 42


State 45

   48 liste_arguments: PARENTHESE_OUVRANTE . liste_args PARENTHESE_FERMANTE

    PARENTHESE_OUVRANTE  shift, and go to state 34
    IDF                  shift, and go to state 69
    CSTE_ENTIERE         shift, and go to state 35
    CSTE_REEL            shift, and go to state 36

    liste_args  go to state 70
    un_arg      go to state 71
    expression  go to state 72
    exparith    go to state 39
    e1          go to state 40
    e2          go to state 41
    e3          go to state 42
    exprel      go to state 43


State 46

   46 appel: IDF liste_arguments .

    $default  reduce using rule 46 (appel)


State 47

   72 exprel: exparith . OP_COMP exparith

    OP_COMP  shift, and go to state 62


State 48

   53 condition: SI exprel . ALORS liste_instructions SINON liste_instructions

    ALORS  shift, and go to state 73


State 49

   54 tant_que: TANT_QUE expression . FAIRE liste_instructions

    FAIRE  shift, and go to state 74


State 50

    6 liste_instructions: DEBUT suite_liste_inst FIN .

    $default  reduce using rule 6 (liste_instructions)


State 51

    8 suite_liste_inst: suite_liste_inst instruction . POINT_VIRGULE

    POINT_VIRGULE  shift, and go to state 75


State 52

    7 suite_liste_inst: instruction POINT_VIRGULE .

    $default  reduce using rule 7 (suite_liste_inst)


State 53

   55 affectation: variable OPAFF . expression

    PARENTHESE_OUVRANTE  shift, and go to state 34
    CSTE_ENTIERE         shift, and go to state 35
    CSTE_REEL            shift, and go to state 36

    expression  go to state 76
    exparith    go to state 39
    e1          go to state 40
    e2          go to state 41
    e3          go to state 42
    exprel      go to state 43


State 54

   30 declaration_variable: VARIABLE IDF DEUX_POINTS . nom_type

    IDF        shift, and go to state 77
    ENTIER     shift, and go to state 78
    REEL       shift, and go to state 79
    BOOLEEN    shift, and go to state 80
    CARACTERE  shift, and go to state 81
    CHAINE     shift, and go to state 82

    nom_type     go to state 83
    type_simple  go to state 84


State 55

   34 liste_parametres: PARENTHESE_OUVRANTE . liste_param PARENTHESE_FERMANTE

    IDF  shift, and go to state 85

    liste_param  go to state 86
    un_param     go to state 87


State 56

   31 declaration_procedure: PROCEDURE IDF liste_parametres . corps

    DEBUT      shift, and go to state 3
    VARIABLE   shift, and go to state 4
    PROCEDURE  shift, and go to state 5
    FONCTION   shift, and go to state 6
    TYPE       shift, and go to state 7

    corps                  go to state 88
    liste_declarations     go to state 9
    liste_instructions     go to state 10
    declaration            go to state 11
    declaration_type       go to state 12
    declaration_variable   go to state 13
    declaration_procedure  go to state 14
    declaration_fonction   go to state 15


State 57

   32 declaration_fonction: FONCTION IDF liste_parametres . RETOURNE type_simple corps

    RETOURNE  shift, and go to state 89


State 58

   13 declaration_type: TYPE IDF DEUX_POINTS . suite_declaration_type

    STRUCT   shift, and go to state 90
    TABLEAU  shift, and go to state 91

    suite_declaration_type  go to state 92


State 59

    2 corps: liste_declarations POINT_VIRGULE liste_instructions .

    $default  reduce using rule 2 (corps)


State 60

    5 liste_declarations: liste_declarations POINT_VIRGULE declaration .

    $default  reduce using rule 5 (liste_declarations)


State 61

   63 e1: e1 . PLUS e2
   64   | e1 . MOINS e2
   69 e3: PARENTHESE_OUVRANTE e1 . PARENTHESE_FERMANTE

    PARENTHESE_FERMANTE  shift, and go to state 93
    PLUS                 shift, and go to state 63
    MOINS                shift, and go to state 64


State 62

   72 exprel: exparith OP_COMP . exparith

    PARENTHESE_OUVRANTE  shift, and go to state 34
    CSTE_ENTIERE         shift, and go to state 35
    CSTE_REEL            shift, and go to state 36

    exparith  go to state 94
    e1        go to state 40
    e2        go to state 41
    e3        go to state 42


State 63

   63 e1: e1 PLUS . e2

    PARENTHESE_OUVRANTE  shift, and go to state 34
    CSTE_ENTIERE         shift, and go to state 35
    CSTE_REEL            shift, and go to state 36

    e2  go to state 95
    e3  go to state 42


State 64

   64 e1: e1 MOINS . e2

    PARENTHESE_OUVRANTE  shift, and go to state 34
    CSTE_ENTIERE         shift, and go to state 35
    CSTE_REEL            shift, and go to state 36

    e2  go to state 96
    e3  go to state 42


State 65

   66 e2: e2 MULT . e3

    PARENTHESE_OUVRANTE  shift, and go to state 34
    CSTE_ENTIERE         shift, and go to state 35
    CSTE_REEL            shift, and go to state 36

    e3  go to state 97


State 66

   67 e2: e2 DIV . e3

    PARENTHESE_OUVRANTE  shift, and go to state 34
    CSTE_ENTIERE         shift, and go to state 35
    CSTE_REEL            shift, and go to state 36

    e3  go to state 98


State 67

   60 variable: IDF CROCHET_OUVRANT IDF . CROCHET_FERMANT
   61         | IDF CROCHET_OUVRANT IDF . CROCHET_FERMANT POINT IDF

    CROCHET_FERMANT  shift, and go to state 99


State 68

   59 variable: IDF CROCHET_OUVRANT exparith . CROCHET_FERMANT

    CROCHET_FERMANT  shift, and go to state 100


State 69

   51 un_arg: IDF .

    $default  reduce using rule 51 (un_arg)


State 70

   48 liste_arguments: PARENTHESE_OUVRANTE liste_args . PARENTHESE_FERMANTE
   50 liste_args: liste_args . VIRGULE un_arg

    VIRGULE              shift, and go to state 101
    PARENTHESE_FERMANTE  shift, and go to state 102


State 71

   49 liste_args: un_arg .

    $default  reduce using rule 49 (liste_args)


State 72

   52 un_arg: expression .

    $default  reduce using rule 52 (un_arg)


State 73

   53 condition: SI exprel ALORS . liste_instructions SINON liste_instructions

    DEBUT  shift, and go to state 3

    liste_instructions  go to state 103


State 74

   54 tant_que: TANT_QUE expression FAIRE . liste_instructions

    DEBUT  shift, and go to state 3

    liste_instructions  go to state 104


State 75

    8 suite_liste_inst: suite_liste_inst instruction POINT_VIRGULE .

    $default  reduce using rule 8 (suite_liste_inst)


State 76

   55 affectation: variable OPAFF expression .

    $default  reduce using rule 55 (affectation)


State 77

   24 nom_type: IDF .

    $default  reduce using rule 24 (nom_type)


State 78

   25 type_simple: ENTIER .

    $default  reduce using rule 25 (type_simple)


State 79

   26 type_simple: REEL .

    $default  reduce using rule 26 (type_simple)


State 80

   27 type_simple: BOOLEEN .

    $default  reduce using rule 27 (type_simple)


State 81

   28 type_simple: CARACTERE .

    $default  reduce using rule 28 (type_simple)


State 82

   29 type_simple: CHAINE . CROCHET_OUVRANT CSTE_ENTIERE CROCHET_FERMANT

    CROCHET_OUVRANT  shift, and go to state 105


State 83

   30 declaration_variable: VARIABLE IDF DEUX_POINTS nom_type .

    $default  reduce using rule 30 (declaration_variable)


State 84

   23 nom_type: type_simple .

    $default  reduce using rule 23 (nom_type)


State 85

   37 un_param: IDF . DEUX_POINTS type_simple

    DEUX_POINTS  shift, and go to state 106


State 86

   34 liste_parametres: PARENTHESE_OUVRANTE liste_param . PARENTHESE_FERMANTE
   36 liste_param: liste_param . POINT_VIRGULE un_param

    POINT_VIRGULE        shift, and go to state 107
    PARENTHESE_FERMANTE  shift, and go to state 108


State 87

   35 liste_param: un_param .

    $default  reduce using rule 35 (liste_param)


State 88

   31 declaration_procedure: PROCEDURE IDF liste_parametres corps .

    $default  reduce using rule 31 (declaration_procedure)


State 89

   32 declaration_fonction: FONCTION IDF liste_parametres RETOURNE . type_simple corps

    ENTIER     shift, and go to state 78
    REEL       shift, and go to state 79
    BOOLEEN    shift, and go to state 80
    CARACTERE  shift, and go to state 81
    CHAINE     shift, and go to state 82

    type_simple  go to state 109


State 90

   14 suite_declaration_type: STRUCT . liste_champs POINT_VIRGULE FSTRUCT

    IDF  shift, and go to state 110

    liste_champs  go to state 111
    un_champ      go to state 112


State 91

   15 suite_declaration_type: TABLEAU . dimension DEUX_POINTS nom_type

    CROCHET_OUVRANT  shift, and go to state 113

    dimension  go to state 114


State 92

   13 declaration_type: TYPE IDF DEUX_POINTS suite_declaration_type .

    $default  reduce using rule 13 (declaration_type)


State 93

   69 e3: PARENTHESE_OUVRANTE e1 PARENTHESE_FERMANTE .

    $default  reduce using rule 69 (e3)


State 94

   72 exprel: exparith OP_COMP exparith .

    $default  reduce using rule 72 (exprel)


State 95

   63 e1: e1 PLUS e2 .
   66 e2: e2 . MULT e3
   67   | e2 . DIV e3

    MULT  shift, and go to state 65
    DIV   shift, and go to state 66

    $default  reduce using rule 63 (e1)


State 96

   64 e1: e1 MOINS e2 .
   66 e2: e2 . MULT e3
   67   | e2 . DIV e3

    MULT  shift, and go to state 65
    DIV   shift, and go to state 66

    $default  reduce using rule 64 (e1)


State 97

   66 e2: e2 MULT e3 .

    $default  reduce using rule 66 (e2)


State 98

   67 e2: e2 DIV e3 .

    $default  reduce using rule 67 (e2)


State 99

   60 variable: IDF CROCHET_OUVRANT IDF CROCHET_FERMANT .
   61         | IDF CROCHET_OUVRANT IDF CROCHET_FERMANT . POINT IDF

    POINT  shift, and go to state 115

    $default  reduce using rule 60 (variable)


State 100

   59 variable: IDF CROCHET_OUVRANT exparith CROCHET_FERMANT .

    $default  reduce using rule 59 (variable)


State 101

   50 liste_args: liste_args VIRGULE . un_arg

    PARENTHESE_OUVRANTE  shift, and go to state 34
    IDF                  shift, and go to state 69
    CSTE_ENTIERE         shift, and go to state 35
    CSTE_REEL            shift, and go to state 36

    un_arg      go to state 116
    expression  go to state 72
    exparith    go to state 39
    e1          go to state 40
    e2          go to state 41
    e3          go to state 42
    exprel      go to state 43


State 102

   48 liste_arguments: PARENTHESE_OUVRANTE liste_args PARENTHESE_FERMANTE .

    $default  reduce using rule 48 (liste_arguments)


State 103

   53 condition: SI exprel ALORS liste_instructions . SINON liste_instructions

    SINON  shift, and go to state 117


State 104

   54 tant_que: TANT_QUE expression FAIRE liste_instructions .

    $default  reduce using rule 54 (tant_que)


State 105

   29 type_simple: CHAINE CROCHET_OUVRANT . CSTE_ENTIERE CROCHET_FERMANT

    CSTE_ENTIERE  shift, and go to state 118


State 106

   37 un_param: IDF DEUX_POINTS . type_simple

    ENTIER     shift, and go to state 78
    REEL       shift, and go to state 79
    BOOLEEN    shift, and go to state 80
    CARACTERE  shift, and go to state 81
    CHAINE     shift, and go to state 82

    type_simple  go to state 119


State 107

   36 liste_param: liste_param POINT_VIRGULE . un_param

    IDF  shift, and go to state 85

    un_param  go to state 120


State 108

   34 liste_parametres: PARENTHESE_OUVRANTE liste_param PARENTHESE_FERMANTE .

    $default  reduce using rule 34 (liste_parametres)


State 109

   32 declaration_fonction: FONCTION IDF liste_parametres RETOURNE type_simple . corps

    DEBUT      shift, and go to state 3
    VARIABLE   shift, and go to state 4
    PROCEDURE  shift, and go to state 5
    FONCTION   shift, and go to state 6
    TYPE       shift, and go to state 7

    corps                  go to state 121
    liste_declarations     go to state 9
    liste_instructions     go to state 10
    declaration            go to state 11
    declaration_type       go to state 12
    declaration_variable   go to state 13
    declaration_procedure  go to state 14
    declaration_fonction   go to state 15


State 110

   22 un_champ: IDF . DEUX_POINTS nom_type

    DEUX_POINTS  shift, and go to state 122


State 111

   14 suite_declaration_type: STRUCT liste_champs . POINT_VIRGULE FSTRUCT
   21 liste_champs: liste_champs . POINT_VIRGULE un_champ

    POINT_VIRGULE  shift, and go to state 123


State 112

   20 liste_champs: un_champ .

    $default  reduce using rule 20 (liste_champs)


State 113

   16 dimension: CROCHET_OUVRANT . liste_dimensions CROCHET_FERMANT

    PARENTHESE_OUVRANTE  shift, and go to state 34
    CSTE_ENTIERE         shift, and go to state 35
    CSTE_REEL            shift, and go to state 36

    liste_dimensions  go to state 124
    une_dimension     go to state 125
    exparith          go to state 126
    e1                go to state 40
    e2                go to state 41
    e3                go to state 42


State 114

   15 suite_declaration_type: TABLEAU dimension . DEUX_POINTS nom_type

    DEUX_POINTS  shift, and go to state 127


State 115

   61 variable: IDF CROCHET_OUVRANT IDF CROCHET_FERMANT POINT . IDF

    IDF  shift, and go to state 128


State 116

   50 liste_args: liste_args VIRGULE un_arg .

    $default  reduce using rule 50 (liste_args)


State 117

   53 condition: SI exprel ALORS liste_instructions SINON . liste_instructions

    DEBUT  shift, and go to state 3

    liste_instructions  go to state 129


State 118

   29 type_simple: CHAINE CROCHET_OUVRANT CSTE_ENTIERE . CROCHET_FERMANT

    CROCHET_FERMANT  shift, and go to state 130


State 119

   37 un_param: IDF DEUX_POINTS type_simple .

    $default  reduce using rule 37 (un_param)


State 120

   36 liste_param: liste_param POINT_VIRGULE un_param .

    $default  reduce using rule 36 (liste_param)


State 121

   32 declaration_fonction: FONCTION IDF liste_parametres RETOURNE type_simple corps .

    $default  reduce using rule 32 (declaration_fonction)


State 122

   22 un_champ: IDF DEUX_POINTS . nom_type

    IDF        shift, and go to state 77
    ENTIER     shift, and go to state 78
    REEL       shift, and go to state 79
    BOOLEEN    shift, and go to state 80
    CARACTERE  shift, and go to state 81
    CHAINE     shift, and go to state 82

    nom_type     go to state 131
    type_simple  go to state 84


State 123

   14 suite_declaration_type: STRUCT liste_champs POINT_VIRGULE . FSTRUCT
   21 liste_champs: liste_champs POINT_VIRGULE . un_champ

    FSTRUCT  shift, and go to state 132
    IDF      shift, and go to state 110

    un_champ  go to state 133


State 124

   16 dimension: CROCHET_OUVRANT liste_dimensions . CROCHET_FERMANT
   18 liste_dimensions: liste_dimensions . VIRGULE une_dimension

    CROCHET_FERMANT  shift, and go to state 134
    VIRGULE          shift, and go to state 135


State 125

   17 liste_dimensions: une_dimension .

    $default  reduce using rule 17 (liste_dimensions)


State 126

   19 une_dimension: exparith . POINT POINT exparith

    POINT  shift, and go to state 136


State 127

   15 suite_declaration_type: TABLEAU dimension DEUX_POINTS . nom_type

    IDF        shift, and go to state 77
    ENTIER     shift, and go to state 78
    REEL       shift, and go to state 79
    BOOLEEN    shift, and go to state 80
    CARACTERE  shift, and go to state 81
    CHAINE     shift, and go to state 82

    nom_type     go to state 137
    type_simple  go to state 84


State 128

   61 variable: IDF CROCHET_OUVRANT IDF CROCHET_FERMANT POINT IDF .

    $default  reduce using rule 61 (variable)


State 129

   53 condition: SI exprel ALORS liste_instructions SINON liste_instructions .

    $default  reduce using rule 53 (condition)


State 130

   29 type_simple: CHAINE CROCHET_OUVRANT CSTE_ENTIERE CROCHET_FERMANT .

    $default  reduce using rule 29 (type_simple)


State 131

   22 un_champ: IDF DEUX_POINTS nom_type .

    $default  reduce using rule 22 (un_champ)


State 132

   14 suite_declaration_type: STRUCT liste_champs POINT_VIRGULE FSTRUCT .

    $default  reduce using rule 14 (suite_declaration_type)


State 133

   21 liste_champs: liste_champs POINT_VIRGULE un_champ .

    $default  reduce using rule 21 (liste_champs)


State 134

   16 dimension: CROCHET_OUVRANT liste_dimensions CROCHET_FERMANT .

    $default  reduce using rule 16 (dimension)


State 135

   18 liste_dimensions: liste_dimensions VIRGULE . une_dimension

    PARENTHESE_OUVRANTE  shift, and go to state 34
    CSTE_ENTIERE         shift, and go to state 35
    CSTE_REEL            shift, and go to state 36

    une_dimension  go to state 138
    exparith       go to state 126
    e1             go to state 40
    e2             go to state 41
    e3             go to state 42


State 136

   19 une_dimension: exparith POINT . POINT exparith

    POINT  shift, and go to state 139


State 137

   15 suite_declaration_type: TABLEAU dimension DEUX_POINTS nom_type .

    $default  reduce using rule 15 (suite_declaration_type)


State 138

   18 liste_dimensions: liste_dimensions VIRGULE une_dimension .

    $default  reduce using rule 18 (liste_dimensions)


State 139

   19 une_dimension: exparith POINT POINT . exparith

    PARENTHESE_OUVRANTE  shift, and go to state 34
    CSTE_ENTIERE         shift, and go to state 35
    CSTE_REEL            shift, and go to state 36

    exparith  go to state 140
    e1        go to state 40
    e2        go to state 41
    e3        go to state 42


State 140

   19 une_dimension: exparith POINT POINT exparith .

    $default  reduce using rule 19 (une_dimension)
